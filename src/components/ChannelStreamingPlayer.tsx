import React, { useEffect, useRef } from 'react';
import Hls from 'hls.js';
import useSocket from '../hooks/socket/useSocket';
import { SOCKET_PATHS } from '../hooks/socket/socketPaths';

interface ChannelStreamingPlayerProps {
  channelId: string;
  m3u8Url: string;
}

const ChannelStreamingPlayer: React.FC<ChannelStreamingPlayerProps> = ({ channelId, m3u8Url }) => {
  const videoRef = useRef<HTMLVideoElement | null>(null);

  // Î£®ÌîÑ Î∞©ÏßÄ
  const isRemoteChangeRef = useRef(false);

  const handleSyncEvent = (data: { type: 'PLAY' | 'PAUSE' | 'SEEK'; time?: number }) => {
    console.log('[ÏàòÏã†] ÎèôÍ∏∞Ìôî Ïù¥Î≤§Ìä∏:', data);

    if (!videoRef.current) return;

    // Ïù¥ Î≥ÄÍ≤ΩÏùÄ Ïô∏Î∂ÄÏóêÏÑú Ïò® Í≤ÉÏù¥ÎØÄÎ°ú Îã§Ïùå onPlay/onSeeked ÎèôÏûëÏùÄ Î¨¥Ïãú
    isRemoteChangeRef.current = true;

    switch (data.type) {
      case 'PLAY':
        videoRef.current.play();
        break;
      case 'PAUSE':
        videoRef.current.pause();
        break;
      case 'SEEK':
        if (typeof data.time === 'number') {
          videoRef.current.currentTime = data.time;
        }
        break;
    }
  };

  // ÏÜåÏºì Ïó∞Í≤∞ Î∞è Î∞úÌñâ Ìï®Ïàò
  const { send: sendSync } = useSocket(
    SOCKET_PATHS.SYNC.SEND(channelId),
    SOCKET_PATHS.SYNC.SUBSCRIBE(channelId),
    handleSyncEvent
  );

  // m3u8 URL Ïó∞Í≤∞ (HLS.js)
  useEffect(() => {
    if (!videoRef.current) return;

    const hls = new Hls();
    hls.loadSource(m3u8Url);
    hls.attachMedia(videoRef.current);

    console.log('üé¨ HLS ÏÜåÏä§ Ïó∞Í≤∞:', m3u8Url);

    return () => {
      hls.destroy();
    };
  }, [m3u8Url]);

  // ÏÇ¨Ïö©Ïûê Ï°∞Ïûë Ïãú ÎèôÍ∏∞Ìôî Ïù¥Î≤§Ìä∏ Ï†ÑÏÜ°
  const handlePlay = () => {
    // Ïô∏Î∂Ä Î≥ÄÍ≤ΩÏúºÎ°ú Ïù∏Ìïú Ïû¨ÏÉùÏù¥Î©¥ Ï†ÑÏÜ° ÏÉùÎûµ
    if (isRemoteChangeRef.current) {
      isRemoteChangeRef.current = false;
      return;
    }
    console.log('‚ñ∂Ô∏è [Ï†ÑÏÜ°] PLAY');
    sendSync({ type: 'PLAY' });
  };

  const handlePause = () => {
    // Ïô∏Î∂Ä Î≥ÄÍ≤ΩÏúºÎ°ú Ïù∏Ìïú Ï†ïÏßÄÏù¥Î©¥ Ï†ÑÏÜ° ÏÉùÎûµ
    if (isRemoteChangeRef.current) {
      isRemoteChangeRef.current = false;
      return;
    }
    console.log('‚è∏Ô∏è [Ï†ÑÏÜ°] PAUSE');
    sendSync({ type: 'PAUSE' });
  };

  const handleSeek = () => {
    if (isRemoteChangeRef.current) {
      isRemoteChangeRef.current = false;
      return;
    }
    if (videoRef.current) {
      console.log('‚è© [Ï†ÑÏÜ°] SEEK ‚Üí', videoRef.current.currentTime);
      sendSync({ type: 'SEEK', time: videoRef.current.currentTime });
    }
  };

  return (
    <div className="w-full max-w-4xl mx-auto">
      <video
        ref={videoRef}
        className="w-full rounded-2xl shadow"
        controls
        onPlay={handlePlay}
        onPause={handlePause}
        onSeeked={handleSeek}
      />
    </div>
  );
};

export default ChannelStreamingPlayer;
